apiVersion: v1
kind: Secret
metadata:
  name: eto-webapp-secrets
  namespace: eto
  labels:
    app: eto-webapp
    environment: production
  annotations:
    kubernetes.io/enforce-mountable-secrets: "true"
type: Opaque
stringData:
  # Application Secrets
  APP_SECRET_KEY: ${APP_SECRET_KEY}
  JWT_SECRET_KEY: ${JWT_SECRET_KEY}
  
  # Database Credentials
  DB_USER: ${DB_USER}
  DB_PASSWORD: ${DB_PASSWORD}
  DB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
  
  # API Keys
  GRAFANA_API_KEY: ${GRAFANA_API_KEY}
  PROMETHEUS_API_KEY: ${PROMETHEUS_API_KEY}

---
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry
  namespace: eto
  labels:
    app: eto-webapp
    type: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: ${DOCKER_CONFIG_JSON}

---
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificates
  namespace: eto
  labels:
    app: eto-webapp
    type: tls
type: kubernetes.io/tls
data:
  tls.crt: ${TLS_CERTIFICATE}
  tls.key: ${TLS_PRIVATE_KEY}
  ca.crt: ${CA_CERTIFICATE}

---
apiVersion: v1
kind: Secret
metadata:
  name: vault-tokens
  namespace: eto
  labels:
    app: vault
    type: auth
  annotations:
    kubernetes.io/service-account.name: "vault-auth"
type: kubernetes.io/service-account-token
data:
  token: ${VAULT_TOKEN}
  ca.crt: ${VAULT_CA_CERT}

---
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-credentials
  namespace: eto
  labels:
    app: monitoring
type: Opaque
stringData:
  prometheus-admin-password: ${PROMETHEUS_ADMIN_PASSWORD}
  grafana-admin-password: ${GRAFANA_ADMIN_PASSWORD}
  alertmanager-config.yml: |
    global:
      resolve_timeout: 5m
      slack_api_url: '${SLACK_WEBHOOK_URL}'
    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 4h
      receiver: 'slack-notifications'
    receivers:
    - name: 'slack-notifications'
      slack_configs:
      - channel: '#alerts'
        send_resolved: true

---
apiVersion: v1
kind: Secret
metadata:
  name: backup-credentials
  namespace: eto
  labels:
    app: backup
type: Opaque
stringData:
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
  BACKUP_ENCRYPTION_KEY: ${BACKUP_ENCRYPTION_KEY}
  S3_BUCKET: ${BACKUP_S3_BUCKET}
  S3_REGION: ${AWS_REGION}

---
apiVersion: v1
kind: Secret
metadata:
  name: eto-webapp-secrets
  namespace: eto-production
  labels:
    app: eto-webapp
    environment: production
type: Opaque
stringData:
  # Database Credentials
  DB_PASSWORD: Et0@2024Secure!
  POSTGRES_PASSWORD: Et0@2024Secure!
  
  # Redis Authentication
  REDIS_PASSWORD: R3d1s@2024!
  
  # Security Keys
  SECRET_KEY: "j2h3g4jh23g4jh23g4jh23g4jh23g4jh23g4"
  JWT_SECRET: "kj34h5kjh345kjh345kjh345kjh345kjh345"
  
  # Docker Registry
  DOCKER_USERNAME: etouser
  DOCKER_PASSWORD: docker-registry-password
  
  # Vault Access
  VAULT_TOKEN: hvs.j2h3g4jh23g4jh23g4jh23g4jh23g4
  
  # SMTP Configuration
  SMTP_PASSWORD: smtp-secure-password-2024
  
  # Grafana
  GRAFANA_API_KEY: eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

---
apiVersion: v1
kind: Secret
metadata:
  name: eto-tls-secret
  namespace: eto-production
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0t...
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0t...

---
apiVersion: v1
kind: Secret
metadata:
  name: eto-registry-secret
  namespace: eto-production
type: kubernetes.io/dockerconfigjson
stringData:
  .dockerconfigjson: |
    {
      "auths": {
        "registry.eto.local": {
          "username": "etouser",
          "password": "docker-registry-password",
          "email": "registry@eto.local",
          "auth": "ZXRvdXNlcjpkb2NrZXItcmVnaXN0cnktcGFzc3dvcmQ="
        }
      }
    }
